Project Description and Goals:

	Location tracking app for public to report where specific San Francisco 
	food trucks (aka attractions) are, and show this dynamically on a map, 
	with some interactive features.

The map:
	- Shows the locations of most recent checkins for attractions
	- Provides routing and times/distances to attraction checkins

Users can:
	- Sign in/sign up (create an account)
	- Reset their password
	- Checkin the location of an attraction
	- See recent checkins made by other users
	- Select which things they want to see on the map 
	- Save their preferences
	- Get distances/times/routes to the nearest attractions
	- Rate checkins made by other users
	- See checkins even if they have bad ratings (or predicted bad ratings)
	- Change their ratings of other user checkins

Technologies & Stack: 

	Backend:
	Python, Flask, Jinja, SQLAlchemy, sqlite, passlib (encryption & verification).
	Flask extensions: Flask-Mail, Flask-Login, Flask-WTForms, Flask-CORS, 
	Flask-SQLAlchemy.
	Machine learning: rating location checkins and using those ratings to rate 
	users and predict the accuracy of their future checkins.

	Frontend:
	JavaScript, jQuery, AJAX, jQuery plugins (lightbox_me, timeago).
	HTML5, CSS3, Twitter Bootstrap (HTML/CSS/JS framework), RWD (responsive web 
	design)

	APIs: 
	Google Maps Javascript V3, Yelp, Geonames, Twilio.

	

Terminology:
	attraction = food truck
	checkin = location update for where a truck is now


********** MVP **********

Showing attractions on a map:
[X]	- Show a map on a website
[X]	- Give map one geolocation and have it display that marker
[X]	- Give map several geolocations to display
[X]	- Give map geolocations from a database to display
[X]	  - Create databases for attractions, checkins and users
[X]	- Get geolocation from a browser and give to map to display
[X]	- Store geolocation from browser in the database
[X]	  - Data modeling: Use multiple databases to store geolocation data per 
	  attraction, etc.

Updating attraction locations on a map:
[X]	- Update geolocation and have map update with it
[X]	- Update geolocation of a single attraction from web application via a button
[X]	- Update geolocation of a specified attraction from web application
[X] - Update geolocation of an attraction by dragging a marker

********** END MVP **********


********** EXTRA FEATURES IN SCOPE **********

User features:
[X]	- Allow a user to signup/login
[X]	- Allow a user to logout
[X]	- Allow a user to checkin an attraction
[X]	- Create tables to associate users, their checkins, and the attractions\
[X] - Securely store user passwords (encryption)

Ratings:
[X]	- Allow a user to rate a checkin up or down
[X]	- Associate ratings with checkins in database
[X]	- Allow a user to change their rating
[X]	- Display ratings next to a checkin (up votes and down votes)
[X]	- Prevent users from rating their own checkin
[X]	- Hide checkins with bad ratings
[X]	- Allow a user to reveal hidden (bad) checkins (show/hide)

User Ratings:
[X]	- Use checkin ratings to create user ratings
[X]	- Apply a user’s ratings to that user’s new checkin (predict whether their 
	  checkin will be good)

Help:
[X]	- Create help section to answer common user questions

Display Options:
Timeouts:
[X]	- Display checkin time stamps based on time elapsed
[X]	- Time out checkins (checkins disappear after X minutes/hours)
[X]	- Change appearance of attraction icon as checkin times out
Selecting what to display:
[X]	- Create in-browser options to display or not display locations for specific 
	  attractions
[X]	- Allow users to select whether they see timed-out checkins
[X]	- Allow users to find specific attractions on the map
[X]	- Option to only display checkins with ratings above X
[X]		- Option to display all ratings, even bad ratings (normally hidden)
[X]		- Option to show/hide PREDICTED bad checkins - based off user ratings
[X]	- Clicking on an attraction name in the checkbox area makes its marker on 
	  the map bounce or something
[X]	- Show previous "good" checkin when display options hide the current one
Map specific:
[X]	- Custom icons for different marker types (NA for type, applicable for TIME)
[X]		- truck icon for food trucks
[X]	- Limit map checkins to only San Francisco
[X]		- Keep map always default centered on San Francisco
[X]	- Directions: Get distances/times/routes to attractions based on current 
	  location
[X]	- Prevent food truck checkins in the ocean

Advanced User Features:
[X]	- Save a user’s preferences
[X]		- only show certain attractions
[X]		- only show good ratings
[X]		- only show checkins made by users
[X]		- only show checkins made by users in good standing (good user rating)
[X]	- Remember a user's login
[X]	- Let a user reset their password if they forgot it
[X]	- Confirm user emails
[X] - User settings page
[X]		- Reset password
[X]	- Allow a user to create a new attraction by emailing me to add it
NA		- Adding it themselves => bad idea: trolling, or could have one 
		  attraction with several different names…

APIs:
Google Maps
[X] - Show and interact with map (key to project)
Twilio
[X]	- Allow a person to text the name of an attraction and get a message back 
	  with a google map link showing the most recent checkin for that
Yelp
[X]	- Link to applicable yelp pages
[X]	- Show yelp rating next to name
Geonames
[X]	- To determine if user is trying to checkin food truck in the ocean

********** END EXTRA FEATURES **********





********** POSSIBLE FUTURE FEATURES FOR CONSIDERATION **********

Foursquare API
	- Allow a user to checkin to foursquare for that attraction

User features:
	- Show them thier stats on their user settings page
	- Show "near me"

Anti-hacking:
	- Delay login requests after getting invalid combo twice.

Advanced Checkin features:
	- Allow a user to edit a checkin
	- Delete checkin

Advanced User Ratings (for possibly improving rating predictions):
Up votes based on checkins:
	- For a new attraction checkin within X minutes of a previous user’s 
	  checkin, within X distance of that previous checkin, apply an up-vote to
	  the previous user’s checkin
	- For all previous checkins within X min and X distance of current checkin, apply an up vote 
Down votes based on checkins:
	- For a new attraction checkin within X minutes, and outside of Y distance, apply a down-vote
		- Y distance: greater than X distance (within X is an up vote).  Some 
		  no-man’s land in between where previous checkins get neither an 
		  up vote or down vote 

********** END POSSIBLE FUTURE FEATURES **********





********** RATING ALGORITHMS **********

- http://possiblywrong.wordpress.com/2011/06/05/reddits-comment-ranking-algorithm/ 
	- tested in python interpreter

Ideas:
	- may make sense to start each user or post with a 10 ups, 10 downs, or (5,5) for greater impact of individual ratings, as default starting point
		- small enough that single votes have an impact, large enough to create a good starting confidence #
		- or could just start at 0,0… negative ratings only give you a negative number, once pos ratings are introduced, the numbers start changing
		- user ratings aren’t 1 each in calculation, but added based on their own rating? so that users with crappy ratings don’t impact other ratings as much?

Finalized:
- in model.py, changed the algorithm:
	- when no upvotes, but there are downvotes, then n = downs, and I return the 
	  NEGATIVE calculation, instead of -downs
	  	- otherwise, -downs would have a greater impact than any upvotes could
    - if no upvotes or downvotes, I return 0

	# From /r2/r2/lib/db/_sorts.pyx
	from math import sqrt
	 
	def confidence_fixed(ups, downs):
	    if ups == 0:
	        return -downs
	    n = ups + downs
	    z = 1.64485 #1.0 = 85%, 1.6 = 95%
	    phat = float(ups) / n
	    return (phat+z*z/(2*n)-z*sqrt((phat*(1-phat)+z*z/(4*n))/n))/(1+z*z/n)




- http://www.evanmiller.org/how-not-to-sort-by-average-rating.html
	- talks about why just comparing positive and negative ratings directly is bad - like the way amazon does it, where an item with 1 positive rating is reddits-comment-ranking-algorithmed above an item with 500 4.5 star ratings




********** GOOGLE MAPS NOTES **********

Google Maps API:

	https://developers.google.com/maps/web/

	- Find the latitude/longitude coordinates for a given address (geocoding), or convert the latitude/longitude coordinates of a geographic location to an address (reverse geocoding). 	
		- Geocoding service in the Google Maps JavaScript API (examples)
    	- Google Geocoding API (a web service)
	- Convert the latitude/longitude coordinates of a geographic location to an address (reverse geocoding). 	
		- Google Places API (a web service)

Google Maps JavaScript API v3:

	https://developers.google.com/maps/documentation/javascript/tutorial

	- Usage Limits: non-issue. Only applies to 25k map loads per day, for more than 90 days









